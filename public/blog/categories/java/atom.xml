<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Reminiscential: of or pertaining to rememberance]]></title>
  <link href="http://kevinjqiu.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://kevinjqiu.github.com/"/>
  <updated>2013-11-20T13:44:10-05:00</updated>
  <id>http://kevinjqiu.github.com/</id>
  <author>
    <name><![CDATA[Kevin Jing Qiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up GWT2 project with gwt-maven-plugin]]></title>
    <link href="http://kevinjqiu.github.com/2009/12/18/setting-up-gwt2-project-with-gwt-maven-plugin/"/>
    <updated>2009-12-18T00:29:00-05:00</updated>
    <id>http://kevinjqiu.github.com/2009/12/18/setting-up-gwt2-project-with-gwt-maven-plugin</id>
    <content type="html"><![CDATA[<p>GWT2 offers a lot of exciting new features: OOPHM, SOYC, code splitting, declarative UI, to name a few. This evening, I experimented setting up a GWT2 project using Codehaus's gwt-maven-plugin.</p>

<p>I'm using Eclipse, so obviously, you need m2eclipse and Google Eclipse Plugin. First step is creating a Maven project:
<code>File-&gt;New-&gt;Project...-&gt;Maven Project</code></p>

<p>In the archetype selection dialog, select org.codehaus.mojo.gwt-maven-plugin:1.1.
<a href="http://reminiscential.wordpress.com/files/2009/12/screenshot-new-maven-project.png"><img class="alignnone size-medium wp-image-119" title="Screenshot-New Maven Project" src="http://reminiscential.wordpress.com/files/2009/12/screenshot-new-maven-project.png?w=300" alt="" width="300" height="200" /></a></p>

<p>We choose this to create an archetype but 1.1 doesn't work with GWT2. Later on, we will modify pom.xml to use another version of the plugin.</p>

<p>Enter your project's GroupId, ArtifactId, Version, and Package -&gt; Finish
<a href="http://reminiscential.wordpress.com/files/2009/12/screenshot-new-maven-project-1.png"><img class="alignnone size-medium wp-image-120" title="Screenshot-New Maven Project -1" src="http://reminiscential.wordpress.com/files/2009/12/screenshot-new-maven-project-1.png?w=300" alt="" width="300" height="200" /></a></p>

<p>The plugin generates an archetype of GWT 1.6 project. In Eclipse, open pom.xml. As stated earlier, gwt-maven-plugin 1.1 doesn't work with GWT2. You need 1.2, but since 1.2 hasn't been released, we will use the snapshot version. The snapshot version is hosted on codehaus's snapshot repository, so we need to add the repository first.
<a href="http://reminiscential.wordpress.com/files/2009/12/plugin-repo1.png"><img class="alignnone size-medium wp-image-121" title="plugin-repo1" src="http://reminiscential.wordpress.com/files/2009/12/plugin-repo1.png?w=300" alt="" width="300" height="148" /></a></p>

<p><code>
Id: codehaus-snapshot-repository
Name: (anything you like)
URL: http://snapshots.repository.codehaus.org
</code></p>

<p>Then, change the version of gwt-maven-plugin from 1.1 to 1.2-SNAPSHOT</p>

<p><a href="http://reminiscential.wordpress.com/files/2009/12/plugin-repo.png"><img class="alignnone size-medium wp-image-122" title="plugin version" src="http://reminiscential.wordpress.com/files/2009/12/plugin-repo.png?w=300" alt="" width="300" height="149" /></a></p>

<p>Also, you need to specify the module and runTarget in the configuration of the plugin, something similar to the following:</p>

<p>```xml</p>

<pre><code>    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
            &lt;artifactId&gt;gwt-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;1.2-SNAPSHOT&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;compile&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
            &lt;configuration&gt;
                &lt;module&gt;com.mycomp.demo.mygwt2.Application&lt;/module&gt;
                &lt;runTarget&gt;com.mycomp.demo.mygwt2.Application/Application.html&lt;/runTarget&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
</code></pre>

<p>  </plugins>
```</p>

<p>Save the pom. Eclipse will be busy fetching the dependencies and building the project.</p>

<p>After it's done, it's time to create launchers.</p>

<p>Right click on pom.xml, Run As-&gt;Maven Build..., in the Run Configurations dialog, put "gwt:compile gwt:run" as the goals.
<a href="http://reminiscential.wordpress.com/files/2009/12/screenshot-run-configurations.png"><img class="alignnone size-medium wp-image-123" title="Screenshot-Run Configurations" src="http://reminiscential.wordpress.com/files/2009/12/screenshot-run-configurations.png?w=300" alt="" width="300" height="172" /></a></p>

<p>Hit "run", GWT Development Mode application will appear.
<a href="http://reminiscential.wordpress.com/files/2009/12/screenshot-gwt-development-mode.png"><img class="alignnone size-medium wp-image-124" title="Screenshot-GWT Development Mode" src="http://reminiscential.wordpress.com/files/2009/12/screenshot-gwt-development-mode.png?w=300" alt="" width="300" height="210" /></a></p>

<p>The final missing piece is the debug mode. One of the advantages of using GWT is developing AJAX application with existing Java tooling. So let's go ahead and set it up.
Right click on pom.xml-&gt;Run As-&gt;Maven build...
In the following dialog, enter "gwt:debug" as goals, save it.</p>

<p>Click on the dropdown of the debug button on the toolbar, select "Debug Configurations".
In the left panel, find "Remote Java Application", select it and click the icon for "New launch configuration" (top left corner). Accept defaults, save, and close.
<a href="http://reminiscential.wordpress.com/files/2009/12/screenshot-debug-configurations.png"><img class="alignnone size-medium wp-image-125" title="Screenshot-Debug Configurations" src="http://reminiscential.wordpress.com/files/2009/12/screenshot-debug-configurations.png?w=300" alt="" width="300" height="172" /></a></p>

<p>Put a breakpoint at Application.onModuleLoad(), start the debug server by running the debug launcher we just created. (the one with goal gwt:debug). When you see "Listening for transport dt_socket at address: 8000" in the console output, run the attach launcher we just created (the remote debugger). The GWT Development Mode app pops up. Because GWT2 uses OOPHM (Out Of Process Hosted Mode), you need to copy the start URL and paste it in a browser (I'm using FF). If it's the first time you run hosted mode like that, you will be asked to install a Firefox plugin. After it's installed, paste the URL into the address bar. If everything goes well, your breakpoint will be hit.
<a href="http://reminiscential.wordpress.com/files/2009/12/screenshot-debug-mygwt2-src-main-java-com-mycomp-demo-mygwt2-client-application-java-eclipse.png"><img class="alignnone size-medium wp-image-126" title="Screenshot-Debug - mygwt2-src-main-java-com-mycomp-demo-mygwt2-client-Application.java - Eclipse" src="http://reminiscential.wordpress.com/files/2009/12/screenshot-debug-mygwt2-src-main-java-com-mycomp-demo-mygwt2-client-application-java-eclipse.png?w=300" alt="" width="300" height="213" /></a></p>

<p>There you have it. A sample mavenized GWT2 project. Enjoy the goodies offered by both GWT2 and Maven!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solving a GWT deferred binding mystery]]></title>
    <link href="http://kevinjqiu.github.com/2009/11/18/solving-a-gwt-deferred-binding-mystery/"/>
    <updated>2009-11-18T10:55:00-05:00</updated>
    <id>http://kevinjqiu.github.com/2009/11/18/solving-a-gwt-deferred-binding-mystery</id>
    <content type="html"><![CDATA[<p>This morning at work, I was running our GWT application with some deferred binding logic in it, and all of a sudden I got this ridiculous message:</p>

<p><code>
[ERROR] Class 'mycompany.rebind.HistoryResourceGenerator' must derive from 'com.google.gwt.core.ext.Generator'
[ERROR] Failure while parsing XML
com.google.gwt.core.ext.UnableToCompleteException: (see previous log entries)
at com.google.gwt.dev.cfg.ModuleDefSchema$ObjAttrCvt.convertToArg(ModuleDefSchema.java:729)
at com.google.gwt.dev.util.xml.HandlerArgs.convertToArg(HandlerArgs.java:64)
at com.google.gwt.dev.util.xml.HandlerMethod.invokeBegin(HandlerMethod.java:214)
at com.google.gwt.dev.util.xml.ReflectiveParser$Impl.startElement(ReflectiveParser.java:257)
at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(Abstract...)
</code>
It was running fine yesterday when I left work, and now it tells me that my generator isn’t a subclass of the GWT Generator??? Quickly pulled the source, and it’s as clear as day that my generator is properly written. Then what gives?</p>

<p>Searching for an explanation, I pulled the GWT’s source code, and opened <code>com.google.gwt.dev.cfg.ModuleDefSchema</code> and here’s the method in question:</p>

<p>```java
  public Object convertToArg(Schema schema, int lineNumber, String elemName,</p>

<pre><code>  String attrName, String attrValue) throws UnableToCompleteException {

Object found = singletonsByName.get(attrValue);
if (found != null) {
  // Found in the cache.
  //
  return found;
}

Class&lt;?&gt; foundClass = null;
try {
  // Load the class.
  //
  ClassLoader cl = Thread.currentThread().getContextClassLoader();
  foundClass = cl.loadClass(attrValue);
  Class&lt;? extends T&gt; clazz = foundClass.asSubclass(fReqdSuperclass);

  T object = clazz.newInstance();
  singletonsByName.put(attrValue, object);
  return object;
} catch (ClassCastException e) {
  Messages.INVALID_CLASS_DERIVATION.log(logger, foundClass,
      fReqdSuperclass, null);
  throw new UnableToCompleteException();
} catch (ClassNotFoundException e) {
  Messages.UNABLE_TO_LOAD_CLASS.log(logger, attrValue, e);
  throw new UnableToCompleteException();
} catch (InstantiationException e) {
  Messages.UNABLE_TO_CREATE_OBJECT.log(logger, attrValue, e);
  throw new UnableToCompleteException();
} catch (IllegalAccessException e) {
  Messages.UNABLE_TO_CREATE_OBJECT.log(logger, attrValue, e);
  throw new UnableToCompleteException();
}
</code></pre>

<p>  }
}
```</p>

<p>Because the error message was from <code>Messages.INVALID\_CLASS\_DERIVATION</code>, I put a breakpoint on line 22:</p>

<p><code>java
Messages.INVALID_CLASS_DERIVATION.log(logger, foundClass, fReqdSuperclass, null);
</code></p>

<p>and started my app in debug mode. The breakpoint hits, and I noticed that the exception object is reporting <code>ClassCastException</code> from <code>JSONNull</code> to <code>JSONObject</code>. I quickly clicked: The error is from the class that fetches some resource over the net and plugged in to the generator. Following this lead, I found that the server resource the class was fetching wasn’t available any more, which caused the fetcher class to fail, and consequently, the <code>ClassCastException</code> is propagated to the generator and eventually <code>ModuleDefSchema</code>.</p>

<p>The mysterious error message, however, has nothing to do with the real problem. I spent a lot of time thinking that my <code>Generator</code> is wrong, because that’s what the compiler says, but in fact, it’s not. I think the confusion can be avoided if the GWT compiler can log the actual exception object, instead of interpreting the exception for the user. That’s what they’re doing in the <code>try/catch</code> clause in the method shown above: the exception object <code>e</code> is not used in the case of <code>ClassCastException</code>…</p>

<p>Well, the take-home message is: don’t always trust the GWT compiler message. Also, adding log more logging to your generator classes that can be indicative to where the actual problem is.</p>
]]></content>
  </entry>
  
</feed>
