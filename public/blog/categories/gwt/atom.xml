<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gwt | Reminiscential: of or pertaining to rememberance]]></title>
  <link href="http://kevinjqiu.github.com/blog/categories/gwt/atom.xml" rel="self"/>
  <link href="http://kevinjqiu.github.com/"/>
  <updated>2013-11-20T13:44:10-05:00</updated>
  <id>http://kevinjqiu.github.com/</id>
  <author>
    <name><![CDATA[Kevin Jing Qiu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GWT code split is awesome]]></title>
    <link href="http://kevinjqiu.github.com/2010/03/26/gwt-code-split-is-awesome/"/>
    <updated>2010-03-26T13:38:00-04:00</updated>
    <id>http://kevinjqiu.github.com/2010/03/26/gwt-code-split-is-awesome</id>
    <content type="html"><![CDATA[<p>For the past few days, I've been working on code splitting our existing GWT application. The application is fairly big with about 20k loc (excluding javadoc, comments and tests). The download size (with obfuscated mode) is about 1.5M, and with pretty mode, is a whooping 10+M. Obviously this is not acceptable.</p>

<p>GWT2 provides developer guided code splitting feature. It sounds complicated and under the hood, it may very well be (involves a lot of graph theories to figure out dependencies and so on) but from the user's point of view, it's very easy. You just have to wrap your potentially big operations in a <code>GWT.runAsync()</code> call.</p>

<p>However, since our application is using GWT best practices (dependency injection, MVP pattern), it's not as straightforward as GWT doc describes. A bit of digging on the internet leads me to <a href="http://code.google.com/p/google-gin/issues/detail?id=61">this page</a></p>

<h2>Gin patch</h2>

<p>Someone contributed a patch to gin, which made split points transparent to the user of gin. The presenters that aren't needed initially can be wrapped in an AsyncProvider&lt;T&gt; instance - which by the blessing of deferred binding, translates into a GWT.runAsync call in the generated code. The patch hasn't been accepted into gin's trunk yet, but it's fairly easy to apply the patch and rebuild. A huge thanks to <a href="http://code.google.com/u/fazal.asim/">fazal.asim</a> who hacked and contributed this patch.</p>

<h2>Results</h2>

<p>The result of code splitting is encouraging - with very little structural change, we're able to reduce the initial download size to 29% of the total size:</p>

<p><a href="http://reminiscential.files.wordpress.com/2010/03/untitled.png"><img class="aligncenter size-medium wp-image-194" title="code split result" src="http://reminiscential.files.wordpress.com/2010/03/untitled.png?w=300" alt="" width="300" height="93" /></a></p>

<h2>Changes</h2>

<p>I mentioned we needed very little structural change, but we did have to change something around. This is because with code splitting, the presenters that are split out from the initial download are not instantiated until they're used/downloaded. This means you cannot put logic in their constructors, and responding to place change has to be initiated by the container presenters.</p>

<h2>Improvements</h2>

<p>Code splitting is awesome. However, if I'm allowed to voice a complaint, the report compiling time is just excruciating! For our application, it usually takes about 10 minutes to compile SOYC report - maybe a few minutes too long given the specs of my machine isn't too bad (Quad Core, 3G memory). Also, the compiled SOYC report takes up 600M of hard disk space! Ouch! Maybe instead of emitting HTML pages, they can make SOYC report a JS application, with data being encoded in JSON format?</p>

<p>Anyway, this doesn't take anything away from the awesome job GWT team has done for developers.</p>

<h2>Follow-up</h2>

<p>Thanks to AsyncProxy, which provides a blocking (synchronous) interface while utilizing GWT.runAsync. This way, I'm able to build a view proxy that implements the same interface while keeping the real view components out of the initial call graph. The result of this, is a further reduction of the initial download size.</p>

<p><a href="http://reminiscential.files.wordpress.com/2010/03/untitled1.png"><img class="aligncenter size-medium wp-image-197" title="Untitled1" src="http://reminiscential.files.wordpress.com/2010/03/untitled1.png?w=300" alt="" width="300" height="88" /></a>The initial download size is 13.77% of the total code size! Sweet!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a GAE+GWT application using the best practices (Part 3)]]></title>
    <link href="http://kevinjqiu.github.com/2010/03/03/building-a-gae-plus-gwt-application-using-the-best-practices-part-3/"/>
    <updated>2010-03-03T01:02:00-05:00</updated>
    <id>http://kevinjqiu.github.com/2010/03/03/building-a-gae-plus-gwt-application-using-the-best-practices-part-3</id>
    <content type="html"><![CDATA[<h2>Building a GAE+GWT application using the best practices series</h2>

<ol>
<li><a href="/2010/02/26/building-a-gae-plus-gwt-application-using-the-best-practices-part-1/">Part 1</a></li>
<li><a href="/2010/03/01/building-a-gae-plus-gwt-application-using-the-best-practices-part-2/">Part 2</a></li>
<li>Part 3</li>
<li><a href="/2010/03/03/building-a-gae-plus-gwt-application-using-the-best-practices-part-4/">Part 4</a></li>
<li><a href="/2010/03/09/building-a-gae-plus-gwt-application-using-the-best-practices-part-5/">Part 5</a></li>
</ol>


<p>In this part of the series, we're going to explore the designing of the web services for RateChecker and coding them using the command pattern from <a href="http://code.google.com/p/gwt-dispatch/">GWT-dispatch</a> based on Ray Ryan's <a href="http://www.youtube.com/watch?v=PDuhR18-EdM">presentation</a>.</p>

<h2>The big picture</h2>

<p><a href="http://reminiscential.files.wordpress.com/2010/03/classdiagram.png"><img class="aligncenter size-medium wp-image-166" title="ClassDiagram" src="http://reminiscential.files.wordpress.com/2010/03/classdiagram.png?w=300" alt="" width="300" height="272" /></a></p>

<p>To correctly implement web services using the command pattern, we first have to get the big picture. There are three "actors" involved in this: an action, a result and a handler.</p>

<h3>Action</h3>

<p>An action is used to store the parameters of the web service call (if any). For instance, a CheckRate action needs to know what type of rate the user is checking: buying rate? selling rate? currency?</p>

<h3>Result</h3>

<p>A result object stores the result (duh...) of the web service call. In the case of CheckRate method, the result is the rate object containing the details of the rate.</p>

<h3>Handler</h3>

<p>A handler is the actual "worker" that actually does the work of checking the rate. In this case, the check rate method fetches the posted rate page , parses the text (if needed) to get the rate information.</p>

<h3>Dispatch and DispatchAsync</h3>

<p>A Handler is executed on the server side (by the DispatchServlet we saw in the last post). On the client side, there's a counterpart "DispatchAsync", which is the asynchronous interface that the client code calls.</p>

<h2>Implementing web service methods</h2>

<p>Now that we have the big picture in place, we're going to look into how to actually implement them.
The first step is to define a domain model. In this case, it's our Rate class:</p>

<p>```java
@PersistenceCapable(identityType=IdentityType.APPLICATION)
public class Rate implements Serializable {</p>

<pre><code>private static final long serialVersionUID = -4415279469780082174L;

@PrimaryKey
@Persistent(valueStrategy=IdGeneratorStrategy.IDENTITY)
private Long id;

@Persistent
private RateType type;

@Persistent
private Date timeFetched;

@Persistent
private Double rate;

public Rate() {
}
// ... getters and setters omitted
</code></pre>

<p>}
```</p>

<p>```java
public enum RateType {</p>

<pre><code>Selling,
Buying,
</code></pre>

<p>}
```</p>

<p>In our example application, we are going to define three simple web methods:</p>

<ul>
<li>Check rate: use Url fetch to get the posted rate page and return a rate object from that.</li>
<li>Save rate: persist the rate object into the data store.</li>
<li>Get rate: get the rates from the data store.</li>
</ul>


<h3>Check rate</h3>

<p>As we have shown in the big picture, every action needs three pieces: action, result (both in shared package, as they will be used by both the client and the server) and the handler (lives in the server package).</p>

<p>For CheckRate action, we need to specify the type of rate it needs to check. For simplicity, I'm always dealing with USD/CAD rate. The parameter here is only for whether to check for buying rate or selling rate.</p>

<p>```java
public class CheckRate implements Action<CheckRateResult> {</p>

<pre><code>private static final long serialVersionUID = -1716760883016361503L;

private RateType _type;

public CheckRate() {
}

public CheckRate(final RateType type) {
    _type = type;
}

public void setType(final RateType type) {
    _type = type;
}

public RateType getType() {
    return _type;
}
</code></pre>

<p>}
```</p>

<p>The result is designed to hold the returned Rate object.</p>

<p>```java
public class CheckRateResult implements Result {</p>

<pre><code>private static final long serialVersionUID = -9099789297842581458L;

private Rate _rate;

public CheckRateResult() {
}

public CheckRateResult(final Rate rate) {
    _rate = rate;
}

public void setRate(final Rate rate) {
    _rate = rate;
}

public Rate getRate() {
    return _rate;
}
</code></pre>

<p>}
```</p>

<p>Word of caution: because both action and result are serialized and sent over the wire as part of GWT-RPC call, they are required to have a default public constructor.</p>

<p>Now, on to the handler:
```java
public class CheckRateHandler implements ActionHandler&lt;CheckRate, CheckRateResult> {</p>

<pre><code>public static final String URL_BUY = "http://www.ingdirect.ca/en/datafiles/rates/usbuying.html";

public static final String URL_SELL = "http://www.ingdirect.ca/en/datafiles/rates/usselling.html";

public CheckRateHandler() {
}

@Override
public CheckRateResult execute(final CheckRate action, final ExecutionContext ctx) throws ActionException {
    final CheckRateResult retval = new CheckRateResult();

    String strUrl = null;
    switch (action.getType()) {
    case Buying:
        strUrl = URL_BUY;
        break;
    case Selling:
        strUrl = URL_SELL;
        break;
    }

    try {
        final URL url = new URL(strUrl);

        BufferedReader br = null;
        try {
            br = new BufferedReader(new InputStreamReader(url.openStream()));

            final double dRate = Double.parseDouble(br.readLine());

            final Rate rate = new Rate();
            rate.setRate(dRate);
            rate.setType(action.getType());
            rate.setTimeFetched(new Date());

            retval.setRate(rate);

        } finally {
            if (br != null)
                br.close();
        }
    } catch (final MalformedURLException e) {
        e.printStackTrace();
        throw new ActionException(e);
    } catch (final IOException e) {
        e.printStackTrace();
        throw new ActionException(e);
    } catch (final NumberFormatException e) {
        e.printStackTrace();
        throw new ActionException(e);
    }

    return retval;
}
// ... other methods omitted
</code></pre>

<p>}
```</p>

<p>As you can see, the handler does the actual work of fetching the rate using URL Fetch service offered by Google App Engine.</p>

<p>The other two web method implementations are similar. You can follow the project on Github <a href="http://github.com/kevinjqiu/ratechecker">here</a>. In the next section, I'm going to go over the building of the UI in GWT, as well as making AJAX calls from GWT to the server.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GXT Widget Expander 1.0 release]]></title>
    <link href="http://kevinjqiu.github.com/2010/02/09/gxt-widget-expander-1-dot-0-release/"/>
    <updated>2010-02-09T00:37:00-05:00</updated>
    <id>http://kevinjqiu.github.com/2010/02/09/gxt-widget-expander-1-dot-0-release</id>
    <content type="html"><![CDATA[<p>This project aims to add flexibility to GXT row expander by enabling putting arbitrary widgets in the expanded row.</p>

<p>GXT's grid widget is great, especially with the RowExpander plugin, it allows the creation of a Google Reader style grid (a list with expandable rows). However, the current GXT's RowExpander design only allows rendering by XTemplate. XTemplate falls short in a number of ways, especially when it comes to user interaction inside the expanded rows.</p>

<p>Using the WidgetExpander, you'll write something similar to the following
```java</p>

<pre><code>WidgetExpander&lt;SomeModel&gt; expander = new WidgetExpander&lt;SomeModel&gt;(new WidgetRowRenderer&lt;SomeModel&gt;() {

    public Widget render(final SomeModel model, final int rowIdx) {
        // Create and return a widget according to the model
    }
});

// Add expander into a list of ColumnConfigs
// Create a grid with the ColumnConfig list
grid.addGridPlugin(expander);
</code></pre>

<p>```</p>

<p>With this enhancement, we're now able to do this:
<a href="http://reminiscential.files.wordpress.com/2010/02/2010-02-24_1654.png"><img src="http://reminiscential.files.wordpress.com/2010/02/2010-02-24_1654.png?w=300" alt="" title="effect" width="300" height="101" class="aligncenter size-medium wp-image-141" /></a></p>

<p>Check it out here on Github: <a href="http://github.com/kevinjqiu/gxt-widget-expander">http://github.com/kevinjqiu/gxt-widget-expander</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating SmartGWT with ASP.NET JSON web service]]></title>
    <link href="http://kevinjqiu.github.com/2009/03/19/integrating-smartgwt-with-asp-dot-net-json-web-service/"/>
    <updated>2009-03-19T09:08:00-04:00</updated>
    <id>http://kevinjqiu.github.com/2009/03/19/integrating-smartgwt-with-asp-dot-net-json-web-service</id>
    <content type="html"><![CDATA[<p>Many web API authors are using third party libraries like JayRock to convert ASP.NET web service method return values to JSON.  ASP.NET does have the ability to return JSON objects for web methods.  It’s not a very well-known feature (I guess) as there are only a few <a href="http://encosia.com/2008/03/27/using-jquery-to-consume-aspnet-json-web-services/">places</a> mentioning it.</p>

<p>For example, suppose the web method we are calling is <code>/ItemService.asmx/GetList</code>, and it’s expecting a parameter “uid”. For JSON web service to work, we have to set the request content type to “application/json” and provide the request parameter as a JSON object and send it through HTTP POST data (<code>{uid:'12345'}</code>).</p>

<p>In the current project I'm working on, I'm hooking up <a href="http://code.google.com/p/smartgwt/">SmartGWT</a>'s Data source to use JSON web service of ASP.NET. SmartGWT’s data source allows OperationBinding to be set for each of the four CRUD operations. For ItemDS, my fetch operation looks like the following:</p>

<p>```java</p>

<pre><code>OperationBinding createFetchOperation() {

    final OperationBinding retval = new OperationBinding(DSOperationType.FETCH, Urls.ISSUE_FETCH);
    retval.setDataFormat(DSDataFormat.JSON);

    retval.setDataProtocol(DSProtocol.POSTPARAMS);

    retval.setRecordXPath("/result");

    return retval;

}
</code></pre>

<p>```</p>

<p>Since we're doing a bunch of customized stuff, we’re bound to override <code>transformRequest()</code> method in the <code>DataSource</code> class:</p>

<p>```java
class ItemDS extends RestDataSource {</p>

<pre><code>/* data source setup */
@Override
protected void transformRequest(DSRequest req) {
    // TODO
}
</code></pre>

<p>}
```</p>

<p>We need to do two things in transformRequest:
1. set request header to <code>application/json; charset=utf-8</code>
2. set the request payload to be the JSON object that contains parameters to the web service
So here we go:</p>

<p>```java
protected void transformRequest(DSRequest req) {</p>

<pre><code>dsRequest.setContentType("application/json; charset=utf-8");
final JavaScriptObject params = JSOHelper.createObject();
JSOHelper.setAttribute(params, "uid", "12345");
req.setData(params);
return req.getData();
</code></pre>

<p>}
```</p>

<p>Does that work? A simple test proved that it didn't. Because remember we set data protocol on the fetch operation to <code>POSTPARAMS</code>? It turns out that even though <code>req.data</code> is sent via POST body, it’s URL form-encoded, not JSON encoded as you would expect since we already set data format to JSON. A bit digging on the SmartGWT forum turned out that data format setting only affects the parsing of the return value, not the outbound parameters.</p>

<p>Okay…let me try again…This time, I’m setting <code>DSProtocol</code> to <code>POSTMESSAGE</code>, as this seems to be a more logical choice (as the parameters are going to be sent out as POST message/body). Does it work? I wish…From the DevConsole, it turns out that SmartGWT’s RPC Manager sends out “[Object]” in POST body…Whaaat? Looking at SmartGWT’s API, it doesn’t allow setting request data as a simple string. It has to be a <code>JavaScriptObject</code> instance. I digged inside SmartGWT’s source code, setting the attribute <code>data</code> directly to the JSON object that I want to use, but GWT shell complains it cannot cast from <code>java.lang.String</code> to <code>JavaScriptObject</code>…Sighhhh</p>

<p>It starts to get frustrating. This evening, as I was going through some JavaScript stuff, it dawns to me that the notion <code>[Object]</code> seems to be the string representation of a generic JavaScript object. (i.e., the return of an object’s <code>toString()</code> method). Looking at <code>JavaScriptObject</code> class in GWT confirms this. So, what if I just override <code>toString()</code> method and just return a JSON object?</p>

<p>This is like an epiphany! I went over some articles on how to do GWT JSNI and quickly come up with this:</p>

<p>```java
/<em> Modify OperationBinding, set to use POSTMESSAGE protocol </em>/
setDataProtocol(DSProtocol.POSTPARAMS);</p>

<p>/<em> in ItemDS </em>/
static native void setValue(JavaScriptObject jso, String val) /*-{</p>

<pre><code>    jso.toString = function() {
                return val;
                    }
</code></pre>

<p>}-<em>/;
/</em> in transformRequest <em>/
/</em> ... setup content type ... */
final JavaScriptObject data = JSOHelper.createObject();
setValue(data, "{uid:'12345'}");
req.setData(data);
return data;
```</p>

<p>Et voilà!!! The DevConsole shows that RPC manager sends out {uid:12345} as the HTTP POST data and I got right what I want.</p>
]]></content>
  </entry>
  
</feed>
